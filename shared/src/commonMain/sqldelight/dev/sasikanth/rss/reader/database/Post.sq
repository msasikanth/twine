import kotlin.Boolean;
import kotlinx.datetime.Instant;

CREATE TABLE post(
  title TEXT NOT NULL,
  description TEXT NOT NULL,
  imageUrl TEXT,
  date INTEGER AS Instant NOT NULL,
  feedLink TEXT NOT NULL,
  link TEXT NOT NULL PRIMARY KEY,
  bookmarked INTEGER AS Boolean NOT NULL DEFAULT 0,
  FOREIGN KEY(feedLink) REFERENCES feed(link) ON DELETE CASCADE
);

CREATE INDEX post_feed_link_index ON post(feedLink);

upsert:
INSERT INTO post(title, description, imageUrl, date, feedLink, link)
VALUES (:title, :description, :imageUrl, :date, :feedLink, :link)
ON CONFLICT(link) DO
UPDATE SET title = excluded.title, description = excluded.description, imageUrl = excluded.imageUrl, date = excluded.date;

-- TODO: Use multiplatform paging
postWithMetadata:
SELECT
  post.title,
  post.description,
  post.imageUrl,
  post.date,
  post.link,
  post.bookmarked,
  feed.name AS feedName,
  feed.icon AS feedIcon
FROM post
INNER JOIN feed ON post.feedLink == feed.link
WHERE :feedLink IS NULL OR post.feedLink = :feedLink
ORDER BY post.date DESC;

updateBookmarkStatus:
UPDATE post SET bookmarked = :bookmarked WHERE link = :link;
