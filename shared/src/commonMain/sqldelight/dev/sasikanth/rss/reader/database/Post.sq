import kotlin.Boolean;
import kotlinx.datetime.Instant;

CREATE TABLE post(
  title TEXT NOT NULL,
  description TEXT NOT NULL,
  imageUrl TEXT,
  date INTEGER AS Instant NOT NULL,
  feedLink TEXT NOT NULL,
  link TEXT NOT NULL PRIMARY KEY,
  bookmarked INTEGER AS Boolean NOT NULL DEFAULT 0,
  commentsLink TEXT DEFAULT NULL,
  read INTEGER AS Boolean NOT NULL DEFAULT 0,
  rawContent TEXT,
  FOREIGN KEY(feedLink) REFERENCES feed(link) ON DELETE CASCADE
);

CREATE INDEX post_feed_link_index ON post(feedLink);

upsert:
INSERT INTO post(title, description, rawContent, imageUrl, date, feedLink, link, commentsLink)
VALUES (:title, :description,  :rawContent, :imageUrl, :date, :feedLink, :link, :commnetsLink)
ON CONFLICT(link) DO
UPDATE SET title = excluded.title, description = excluded.description, rawContent = excluded.rawContent, imageUrl = excluded.imageUrl, date = excluded.date;

count:
SELECT COUNT(*) FROM post
WHERE (:feedLink IS NULL OR post.feedLink = :feedLink) AND post.link NOT IN (
  SELECT post.link FROM post
  WHERE (:feedLink IS NULL OR post.feedLink = :feedLink) AND post.imageUrl IS NOT NULL
  ORDER BY post.date DESC LIMIT :featuredPostsLimit
);

featuredPosts:
SELECT
  post.title,
  post.description,
  post.imageUrl,
  post.date,
  post.link,
  post.bookmarked,
  feed.name AS feedName,
  feed.icon AS feedIcon,
  feedLink,
  post.commentsLink,
  post.read
FROM post
INNER JOIN feed ON post.feedLink == feed.link
WHERE
  (:unreadOnly IS NULL OR post.read != :unreadOnly) AND
  (:feedLink IS NULL OR post.feedLink = :feedLink) AND
  post.imageUrl IS NOT NULL AND
  post.date > :postsAfter
ORDER BY post.date DESC LIMIT :limit;

posts:
SELECT
  post.title,
  post.description,
  post.imageUrl,
  post.date,
  post.link,
  post.bookmarked,
  feed.name AS feedName,
  feed.icon AS feedIcon,
  feedLink,
  post.commentsLink,
  post.read
FROM post
INNER JOIN feed ON post.feedLink == feed.link
WHERE
  (:unreadOnly IS NULL OR post.read != :unreadOnly) AND
  (:feedLink IS NULL OR post.feedLink = :feedLink) AND
  post.link NOT IN (
    SELECT post.link FROM post
    WHERE
    (:unreadOnly IS NULL OR post.read != :unreadOnly) AND
    (:feedLink IS NULL OR post.feedLink = :feedLink) AND
    post.imageUrl IS NOT NULL AND
    post.date > :postsAfter
    ORDER BY post.date DESC LIMIT :featuredPostsLimit
  ) AND
  post.date > :postsAfter
ORDER BY post.date DESC
LIMIT :limit OFFSET :offset;

updateBookmarkStatus:
UPDATE post SET bookmarked = :bookmarked WHERE link = :link;

updateReadStatus:
UPDATE post SET read = :read WHERE link = :link;

deleteReadPosts:
DELETE FROM post
WHERE post.read == 1 AND post.date < :before
RETURNING post.feedLink;

markPostsInFeedAsRead:
UPDATE post
SET read = CASE WHEN read != 1 THEN 1 ELSE read END
WHERE feedLink = :feedLink;

post:
SELECT * FROM post
WHERE post.link = :link;

hasPost:
SELECT EXISTS(SELECT 1 FROM post WHERE link = :link);
