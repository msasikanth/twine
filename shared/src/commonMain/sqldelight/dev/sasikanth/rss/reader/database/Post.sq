import kotlin.Boolean;
import kotlinx.datetime.Instant;

CREATE TABLE post(
  title TEXT NOT NULL,
  description TEXT NOT NULL,
  imageUrl TEXT,
  date INTEGER AS Instant NOT NULL,
  feedLink TEXT NOT NULL,
  link TEXT NOT NULL PRIMARY KEY,
  bookmarked INTEGER AS Boolean NOT NULL DEFAULT 0,
  commentsLink TEXT DEFAULT NULL,
  read INTEGER AS Boolean NOT NULL DEFAULT 0,
  FOREIGN KEY(feedLink) REFERENCES feed(link) ON DELETE CASCADE
);

CREATE INDEX post_feed_link_index ON post(feedLink);

upsert:
INSERT INTO post(title, description, imageUrl, date, feedLink, link, commentsLink)
VALUES (:title, :description, :imageUrl, :date, :feedLink, :link, :commnetsLink)
ON CONFLICT(link) DO
UPDATE SET title = excluded.title, description = excluded.description, imageUrl = excluded.imageUrl, date = excluded.date;

count:
SELECT COUNT(*) FROM post
WHERE (:feedLink IS NULL OR post.feedLink = :feedLink) AND post.link NOT IN (
  SELECT post.link FROM post
  WHERE (:feedLink IS NULL OR post.feedLink = :feedLink) AND post.imageUrl IS NOT NULL
  ORDER BY post.date DESC LIMIT :featuredPostsLimit
);

featuredPosts:
SELECT
  post.title,
  post.description,
  post.imageUrl,
  post.date,
  post.link,
  post.bookmarked,
  feed.name AS feedName,
  feed.icon AS feedIcon,
  feedLink,
  post.commentsLink,
  post.read
FROM post
INNER JOIN feed ON post.feedLink == feed.link
WHERE (:feedLink IS NULL OR post.feedLink = :feedLink) AND post.imageUrl IS NOT NULL
ORDER BY post.date DESC LIMIT :limit;

posts:
SELECT
  post.title,
  post.description,
  post.imageUrl,
  post.date,
  post.link,
  post.bookmarked,
  feed.name AS feedName,
  feed.icon AS feedIcon,
  feedLink,
  post.commentsLink,
  post.read
FROM post
INNER JOIN feed ON post.feedLink == feed.link
WHERE (:feedLink IS NULL OR post.feedLink = :feedLink) AND post.link NOT IN (
  SELECT post.link FROM post
  WHERE (:feedLink IS NULL OR post.feedLink = :feedLink) AND post.imageUrl IS NOT NULL
  ORDER BY post.date DESC LIMIT :featuredPostsLimit
)
ORDER BY post.date DESC
LIMIT :limit OFFSET :offset;

updateBookmarkStatus:
UPDATE post SET bookmarked = :bookmarked WHERE link = :link;

updateReadStatus:
UPDATE post SET read = :read WHERE link = :link;
