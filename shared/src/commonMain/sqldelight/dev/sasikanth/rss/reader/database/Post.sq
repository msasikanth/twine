import kotlinx.datetime.Instant;

CREATE TABLE post(
  title TEXT NOT NULL,
  description TEXT NOT NULL,
  imageUrl TEXT,
  date INTEGER AS Instant NOT NULL,
  feedLink TEXT NOT NULL,
  link TEXT NOT NULL PRIMARY KEY,
  FOREIGN KEY(feedLink) REFERENCES feed(link) ON DELETE CASCADE
);

CREATE INDEX post_feed_link_index ON post(feedLink);

-- FTS --
CREATE VIRTUAL TABLE IF NOT EXISTS post_search USING FTS5(
    title TEXT NOT NULL,
    description TEXT NOT NULL,
    link TEXT NOT NULL PRIMARY KEY UNINDEXED,
    tokenize="trigram"
);

CREATE TRIGGER IF NOT EXISTS
post_search_fts_BEFORE_UPDATE
BEFORE UPDATE ON post
BEGIN DELETE FROM post_search WHERE link = old.link;
END;

CREATE TRIGGER IF NOT EXISTS
post_search_fts_BEFORE_DELETE
BEFORE DELETE ON post
BEGIN DELETE FROM post_search WHERE link = old.link;
END;

CREATE TRIGGER IF NOT EXISTS
post_search_fts_AFTER_UPDATE
AFTER UPDATE ON post
BEGIN UPDATE post_search SET title = new.title, description = new.description WHERE link = new.link;
END;

CREATE TRIGGER IF NOT EXISTS
post_search_fts_AFTER_INSERT
AFTER INSERT ON post
BEGIN INSERT OR REPLACE INTO post_search(title, description, link) VALUES (new.title, new.description, new.link);
END;
-- FTS --

upsert {
  UPDATE post
  SET title = :title,
      description = :description,
      imageUrl = :imageUrl,
      date = :date
  WHERE link = :link;

  INSERT OR REPLACE INTO post(title, description, imageUrl, date, feedLink, link)
  VALUES (:title, :description, :imageUrl, :date, :feedLink, :link);
}

/**
  TODO: Use multiplatform paging
*/
postWithMetadata:
SELECT
  post.title,
  post.description,
  post.imageUrl,
  post.date,
  post.link,
  feed.name AS feedName,
  feed.icon AS feedIcon
FROM post
INNER JOIN feed ON post.feedLink == feed.link
WHERE :feedLink IS NULL OR post.feedLink = :feedLink
ORDER BY post.date DESC;

search:
SELECT
  post_search.title,
  post_search.description,
  post.imageUrl,
  post.date,
  post.link,
  feed.name AS feedName,
  feed.icon AS feedIcon
FROM post_search
INNER JOIN post ON post.link == post_search.link
INNER JOIN feed ON post.feedLink == feed.link
WHERE post_search MATCH :search_query
ORDER BY post.date DESC;
