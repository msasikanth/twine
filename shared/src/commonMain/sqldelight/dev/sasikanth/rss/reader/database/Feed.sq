import kotlinx.datetime.Instant;

CREATE TABLE feed(
  name TEXT NOT NULL,
  icon TEXT NOT NULL,
  description TEXT NOT NULL,
  homepageLink TEXT NOT NULL,
  createdAt INTEGER AS Instant NOT NULL,
  link TEXT NOT NULL PRIMARY KEY,
  pinnedAt INTEGER AS Instant,
  lastCleanUpAt INTEGER AS Instant
);

CREATE INDEX feed_link_index ON feed(link);

upsert:
INSERT INTO feed(name, icon, description, homepageLink, createdAt, link)
VALUES (?, ?, ?, ?, ?, ?)
ON CONFLICT(link) DO
UPDATE SET icon = excluded.icon, description = excluded.description,
homepageLink = excluded.homepageLink;

remove:
DELETE FROM feed WHERE link = :link;

count:
SELECT COUNT(*) FROM feed;

feeds:
SELECT * FROM feed
ORDER BY pinnedAt DESC, createdAt DESC;

feedsPaginated:
SELECT
  f.name,
  f.icon,
  f.description,
  f.homepageLink,
  f.createdAt,
  f.link,
  f.pinnedAt,
  f.lastCleanUpAt,
  COUNT(CASE WHEN p.read = 0 THEN 1 ELSE NULL END) AS numberOfUnreadPosts
FROM feed f
LEFT JOIN post p ON f.link = p.feedLink
WHERE p.date > :postsAfter
GROUP BY f.link
ORDER BY f.pinnedAt DESC, f.createdAt DESC
LIMIT :limit OFFSET :offset;

feed:
SELECT * FROM feed
WHERE link = :link
ORDER BY pinnedAt DESC, createdAt DESC LIMIT 1;

updateFeedName:
UPDATE feed SET name = :newFeedName WHERE link = :link;

hasFeed:
SELECT EXISTS(SELECT 1 FROM feed WHERE link = :link);

updatePinnedAt:
UPDATE feed SET pinnedAt = :pinnedAt WHERE link = :link;

numberOfPinnedFeeds:
SELECT COUNT(*) FROM feed WHERE pinnedAt IS NOT NULL;

numberOfFeeds:
SELECT COUNT(*) FROM feed;

updateLastCleanUpAt:
UPDATE feed SET lastCleanUpAt = :lastCleanUpAt WHERE link = :link;
