import kotlin.Boolean;
import kotlinx.datetime.Instant;

CREATE TABLE feed(
  id TEXT NOT NULL PRIMARY KEY,
  name TEXT NOT NULL,
  icon TEXT NOT NULL,
  description TEXT NOT NULL,
  link TEXT NOT NULL,
  homepageLink TEXT NOT NULL,
  createdAt INTEGER AS Instant NOT NULL,
  pinnedAt INTEGER AS Instant,
  lastCleanUpAt INTEGER AS Instant,
  alwaysFetchSourceArticle INTEGER AS Boolean NOT NULL DEFAULT 0,
  pinnedPosition REAL NOT NULL DEFAULT 0.0,
  showFeedFavIcon INTEGER AS Boolean NOT NULL DEFAULT 1
);

CREATE INDEX feed_link_index ON feed(link);
CREATE INDEX feed_pinned_at ON feed(pinnedAt);
CREATE INDEX feed_pinned_position ON feed(pinnedPosition);

upsert:
INSERT INTO feed(id, name, icon, description, homepageLink, createdAt, link)
VALUES (?, ?, ?, ?, ?, ?, ?)
ON CONFLICT(id) DO
UPDATE SET icon = excluded.icon, description = excluded.description,
homepageLink = excluded.homepageLink;

remove:
DELETE FROM feed WHERE id = :id;

count:
SELECT COUNT(*) FROM feed;

pinnedFeedsCount:
SELECT COUNT(*) FROM feed WHERE pinnedAt IS NOT NULL;

feeds:
SELECT * FROM feed
ORDER BY pinnedAt DESC, createdAt DESC;

feedsPaginated:
SELECT
  f.id,
  f.name,
  f.icon,
  f.description,
  f.link,
  f.homepageLink,
  f.createdAt,
  f.pinnedAt,
  f.lastCleanUpAt,
  COUNT(CASE WHEN p.read = 0 THEN 1 ELSE NULL END) AS numberOfUnreadPosts,
  f.pinnedPosition,
  f.showFeedFavIcon
FROM feed f
LEFT JOIN post p ON f.id = p.sourceId AND p.date > :postsAfter
GROUP BY f.id
ORDER BY
  CASE WHEN :orderBy = 'latest' THEN f.createdAt END DESC,
  CASE WHEN :orderBy = 'oldest' THEN f.createdAt END ASC,
  CASE WHEN :orderBy = 'alphabetical' THEN f.name END ASC,
  CASE WHEN :orderBy = 'pinned' THEN f.pinnedAt END DESC,
  f.createdAt DESC
LIMIT :limit OFFSET :offset;

feed:
SELECT * FROM feed
WHERE id = :id
ORDER BY pinnedAt DESC, createdAt DESC LIMIT 1;

feedWithUnreadPostsCount:
SELECT
  f.id,
  f.name,
  f.icon,
  f.description,
  f.link,
  f.homepageLink,
  f.createdAt,
  f.pinnedAt,
  f.lastCleanUpAt,
  f.alwaysFetchSourceArticle,
  COUNT(CASE WHEN p.read = 0 THEN 1 ELSE NULL END) AS numberOfUnreadPosts,
  f.showFeedFavIcon
FROM feed f
LEFT JOIN post p ON f.id = p.sourceId AND p.date > :postsAfter
WHERE f.id = :id
ORDER BY pinnedAt DESC, createdAt DESC LIMIT 1;

updateFeedName:
UPDATE feed SET name = :newFeedName WHERE id = :id;

hasFeed:
SELECT EXISTS(SELECT 1 FROM feed WHERE id = :id);

updatePinnedAt:
UPDATE feed SET pinnedAt = :pinnedAt, pinnedPosition = 0.0 WHERE id = :id;

numberOfPinnedFeeds:
SELECT COUNT(*) FROM feed WHERE pinnedAt IS NOT NULL;

numberOfFeeds:
SELECT COUNT(*) FROM feed;

updateLastCleanUpAt:
UPDATE feed SET lastCleanUpAt = :lastCleanUpAt WHERE id = :id;

updateAlwaysFetchSourceArticle:
UPDATE feed SET alwaysFetchSourceArticle = :alwaysFetchSourceArticle WHERE id = :id;

feedsInGroupPaginatedCount:
SELECT COUNT(*) FROM feed
WHERE id IN :feedIds;

feedsInGroupPaginated:
SELECT
  f.id,
  f.name,
  f.icon,
  f.description,
  f.link,
  f.homepageLink,
  f.createdAt,
  f.pinnedAt,
  f.lastCleanUpAt,
  0 AS numberOfUnreadPosts,
  f.showFeedFavIcon
FROM feed f
WHERE f.id IN :feedIds
ORDER BY
  CASE WHEN :orderBy = 'latest' THEN f.createdAt END DESC,
  CASE WHEN :orderBy = 'oldest' THEN f.createdAt END ASC,
  CASE WHEN :orderBy = 'alphabetical' THEN f.name END ASC,
  f.createdAt DESC
LIMIT :limit OFFSET :offset;

updatedPinnedPosition:
UPDATE feed SET pinnedPosition = :pinnedPosition WHERE id = :id;
