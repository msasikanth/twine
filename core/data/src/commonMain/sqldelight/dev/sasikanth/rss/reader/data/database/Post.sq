import kotlin.Boolean;
import kotlinx.datetime.Instant;

CREATE TABLE post(
  id TEXT NOT NULL PRIMARY KEY,
  sourceId TEXT NOT NULL,
  title TEXT NOT NULL,
  description TEXT NOT NULL,
  rawContent TEXT,
  imageUrl TEXT,
  date INTEGER AS Instant NOT NULL,
  link TEXT NOT NULL,
  commentsLink TEXT DEFAULT NULL,
  bookmarked INTEGER AS Boolean NOT NULL DEFAULT 0,
  read INTEGER AS Boolean NOT NULL DEFAULT 0,
  FOREIGN KEY(sourceId) REFERENCES feed(id) ON DELETE CASCADE
);

CREATE INDEX post_source_id_index ON post(sourceId);
CREATE INDEX post_date_desc_index ON post (date DESC);

upsert:
INSERT INTO post(id, sourceId, title, description, rawContent, imageUrl, date, link, commentsLink)
VALUES (:id,  :sourceId, :title, :description,  :rawContent, :imageUrl, :date, :link, :commnetsLink)
ON CONFLICT(id) DO
UPDATE SET title = excluded.title, description = excluded.description, rawContent = excluded.rawContent, imageUrl = excluded.imageUrl;

count:
SELECT COUNT(DISTINCT post.id) FROM post
LEFT JOIN feedGroup ON INSTR(feedGroup.feedIds, post.sourceId)
WHERE
  (:unreadOnly IS NULL OR post.read != :unreadOnly) AND
  (
    :sourceId IS NULL OR
    post.sourceId = :sourceId OR
    feedGroup.id = :sourceId
  ) AND
  post.id NOT IN :featuredPosts AND
  post.date > :postsAfter
ORDER BY post.date DESC;

featuredPosts:
SELECT DISTINCT
  post.id,
  sourceId,
  post.title,
  post.description,
  post.imageUrl,
  post.date,
  post.link,
  post.commentsLink,
  post.bookmarked,
  post.read,
  feed.name AS feedName,
  feed.icon AS feedIcon
FROM post
INNER JOIN feed ON post.sourceId == feed.id
LEFT JOIN  feedGroup ON INSTR(feedGroup.feedIds, post.sourceId)
WHERE
  (:unreadOnly IS NULL OR post.read != :unreadOnly) AND
  (
    :sourceId IS NULL OR
    post.sourceId = :sourceId OR
    feedGroup.id = :sourceId
  ) AND
  post.imageUrl IS NOT NULL AND
  post.date > :postsAfter
ORDER BY post.date DESC LIMIT :limit;

posts:
SELECT DISTINCT
  post.id,
  sourceId,
  post.title,
  post.description,
  post.imageUrl,
  post.date,
  post.link,
  post.commentsLink,
  post.bookmarked,
  post.read,
  feed.name AS feedName,
  feed.icon AS feedIcon
FROM post
INNER JOIN feed ON post.sourceId == feed.id
LEFT JOIN feedGroup ON INSTR(feedGroup.feedIds, post.sourceId)
WHERE
  (:unreadOnly IS NULL OR post.read != :unreadOnly) AND
  (
    :sourceId IS NULL OR
    post.sourceId = :sourceId OR
    feedGroup.id = :sourceId
  ) AND
  post.id NOT IN :featuredPosts AND
  post.date > :postsAfter
ORDER BY post.date DESC
LIMIT :limit OFFSET :offset;

updateBookmarkStatus:
UPDATE post SET bookmarked = :bookmarked WHERE id = :id;

updateReadStatus:
UPDATE post SET read = :read WHERE id = :id;

deleteReadPosts:
DELETE FROM post
WHERE post.read == 1 AND post.date < :before
RETURNING post.sourceId;

markPostsAsRead:
UPDATE post
SET read = CASE WHEN read != 1 THEN 1 ELSE read END
WHERE (sourceId = :sourceId OR :sourceId IS NULL) AND date > :after;

post:
SELECT * FROM post
WHERE post.id = :id;

hasPost:
SELECT EXISTS(SELECT 1 FROM post WHERE id = :id);

unreadPostsCountInSource:
SELECT COUNT(*) FROM post
LEFT JOIN feedGroup ON INSTR(feedGroup.feedIds, post.sourceId)
WHERE
  read != 1 AND
  date > :after AND
  (
    :sourceId IS NULL OR
    post.sourceId = :sourceId OR
    feedGroup.id = :sourceId
  );
